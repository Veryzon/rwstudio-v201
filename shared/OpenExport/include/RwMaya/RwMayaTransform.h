#if !defined(RW_MAYA_TRANSFORM_H)
#define RW_MAYA_TRANSFORM_H

#include "RwMayaBlindData.h"

/**
*  \ingroup mayascenegraph 
*
*  This is the RwMaya implementation of RwCommTransform.
*
*   \see RwCommTransform
*/
class RWMAYA_API RwMayaTransform : public RwCommTransform, public RwMayaBlindData
{
public:
	RwMayaTransform(MDagPath dagPat);
	virtual ~RwMayaTransform();

    virtual RwCommError OnSetFrame(RwCommReal frame);

    // Visibility
    virtual RwCommError GetVisibility(bool &bIsVisible) const;

    // Animation type
    virtual RwCommAnimType GetAnimationType(int i);

    /**
     *  This function is used within RwMayaTransform to extract the matrix at a dag path.
     *  It returns the dag path inclusive matrix with a translation set the rotation pivot
     *  location (MFnTransform::rotatePivot(MSpace::kWorld));
     *  \param dagPath the dagPath to extract a matrix from.
     *  \param matrix the matrix to be filled in.
     *
     *  \return RWCOMM_SUCCESS if successful, RWCOMM_FAIL otherwise.
     */
    virtual RwCommError ExtractMayaMatrix(const MDagPath &dagPath, MMatrix & matrix) const;

	// Matrix querys
	virtual RwCommError GetObjMatrix(RwCommMatrix& matrix) const;
	virtual RwCommError GetWorldMatrix(RwCommMatrix& matrix) const;

    /**
     *  Maya implementation of RwCommTransform::GetScalePivots. The pre-scale transformation transforms
     *  to the Maya scale pivot location (MFnTransform::scalePivot). The post-scale transformation removes
     *  this offset, adds the Maya scale pivot translation (MFnTransform::scalePivotTranslation) and finally
     *  adds in the rotate pivot offset (MFnTransform::rotatePivot).
     *  \param preScale the pre-scale transformation
     *  \param postScale the post-scale trasnformations
     *
     *  \return RWCOMM_SUCCESS if successful, RWCOMM_FAIL otherwise.
     */
    virtual RwCommError     GetScalePivots(RwCommMatrix & preScale, RwCommMatrix & postScale) const;

    /**
     *  Maya implementation of RwCommObject::GetUserData. Simply calls RwMayaBlindData::GetUserData.
     *  \param userDataColl the RwCommUserDataCollection in which data is to be filled.
     *  \return RWCOMM_SUCCESS if successful, RWCOMM_FAIL otherwise.
     */
    virtual RwCommError GetUserData(RwCommUserDataCollection &userDataColl);

    // Get attribute methods.
    virtual RwCommError GetAttribute(const RwWString& name, int &value, int index = 0);
    virtual RwCommError GetAttribute(const RwWString& name, float &value, int index = 0);
    virtual RwCommError GetAttribute(const RwWString& name, RwWString &value, int index = 0);
    /**
     *  Maya implementation of RwCommAnimatable::GetAttributeNames. Simply calls RwMayaBlindData::GetObjectAttributeNames.
     *  \param vAttributeNames the names of all attributes found.
     *  \param vAttributeTypes the types of all attributes found.
     *  \return RWCOMM_SUCCESS if successful, RWCOMM_FAIL otherwise.
     */
    virtual RwCommError GetAttributeNames(RwVector<RwWString>& vAttributeNames, RwVector<AttributeType> &vAttributeTypes);

    // Tagging
    virtual RwCommError GetNodeTagValue(int &tagValue, bool &bAutoGenerated) const;

    MDagPath GetDagPath() const { return m_dagPath; }

protected:

    MDagPath    m_dagPath;
    RwCommVec3  m_rotatePivot;
    RwCommVec3  m_scalePivot;
    RwCommVec3  m_scalePivotTranslation;
};


/**
*  \ingroup mayabuilder 
*
*  This class is responsible for creating an RwMayaTransform object.
*
*   \see RwMayaTransform
*   \see RwMayaObjCreator
*/
class RWMAYA_API RwMayaTransformCreator : public RwMayaObjCreator
{
public:
	RwMayaTransformCreator();
	virtual ~RwMayaTransformCreator();

	virtual RwCommObject *Create(const RwCommCreationData *pCreationData,
        const RwCommExportOptions *pExportOptions) const;

	virtual void Init(  RwCommObject *pObject,
                        const RwCommCreationData *pCreationData,
                        const RwCommExportOptions *pExportOptions) const;

	virtual void Attach(RwCommObject* pObject, RwCommObject* pParent, RwCommScene* pScene,
                        const RwCommCreationData* pCreationData) const;

    virtual void Traverse(RwCommBuilder & rBuilder,
                            RwCommCreationData *pCreationData,
                            RwCommObject *pParent) const;
protected:
    RwMayaTraverseAnimations            m_AnimationTraverse;
    RwMayaTraverseIKAnimations          m_IKTraverse;
    RwMayaTraverseConstraintAnimations  m_ConstraintTraverse;
};

#endif // !defined(RW_MAYA_TRANSFORM_H)
