<?xml version="1.0" ?>
<build version = "1.0">
   <rule name="RF3AssetExporter" dependencygraph="RF3AssetExporterDependencies"
                                 buildcommand="RF3AssetExporterCommand"
                                 strictvalidation="false">
      <object id="FileSystem" progid="Scripting.FileSystemObject"/>
      <object id="RWSScript"  progid="CSL.RWSScript.RWSScript"/>
      <object id="RWSComms"   progid="CSL.RWSTarget.RWSComms"/>
      <reference object="CSL.RWSTarget.RWSComms"/>
      <script language="VBScript" src="BuildTools.vbs"/>
      <script language="VBScript" src="RF3Tools.vbs"/>
      <script language="VBScript"><![CDATA[
         '-----------------------------------------------------------------------------------------
         ' RF3Asset.rule - RF3AssetExporter rule
         '
         ' The assets generated by this rule will be created under the resource root. This may be
         ' a managed location, so the generated files may be stored in version control so will need
         ' adding to the default changeset the first time they're created and checked out each time
         ' they need editing.
         ' - Before creation, if the files may already be managed, they will be checked out. This
         '   will be done as late as possible (during the command phase, when we know we'll be
         '   writing out these files).
         ' - After creation, if the files may not be managed, the files will be added to the default
         '   changeset.
         ' - If we're cleaning and the files may already be managed, they will be checked out
         '   during the dependency checking phase (the command function will not be called for a
         '   clean) - at each place we do a SetTarget.
         '-----------------------------------------------------------------------------------------

         Option Explicit ' All variables must be explicitly declared (with Dim)

         '-----------------------------------------------------------------------------------------
         ' Variables global to this rule
         Dim g_DeletedTag      ' The tag set against deleted objects.
         Set g_DeletedTag      = RWSScript.RegisterTag ("RWSTAG_DELETED_ID")

         '-----------------------------------------------------------------------------------------
         '
         Sub RF3AssetExporterDependencies (Task, AssetID)
            Dim Asset, RootAsset

            ' Get the root asset that references the RF3 file.
            Set Asset     = RWSScript.Asset (AssetID)
            Set RootAsset = GetRootRF3Asset (Asset)
            If AssetIsRootRF3 (RootAsset) Then
               Task.SetParam conRootAssetParam, RootAsset
               Dim RF3Translator, AssetInfos, strAssetFilename

               ' Build a full path to the RF3 file.
               strAssetFilename = BuildPath (GetParam ("WKSRESOURCEROOT"), RootAsset.File)
               strAssetFilename = FileSystem.GetAbsolutePathName (strAssetFilename)

               ' Get the list of assets from the RF3 file.
               Set RF3Translator = GetParam ("RF3TRANSLATOR")

               Set AssetInfos   = RF3Translator.GetAssetInfo (strAssetFilename, _
                                               GetParam ("RF3PROJECTTEMPLATENAME"), _
                                               GetExportsLocation (Task), _
                                               FileSystem.GetBaseName (RootAsset.file), _
                                               Nothing)
               Task.SetParam conAssetInfosParam, AssetInfos

               ' Create an RWStudio asset hierarchy to match the one in the RF3.
               CreateRWStudioAssetHierarchy AssetInfos, RootAsset

               ' Set the dependencies: The asset's RF3 resource (RF3 file), RF3 template.
               Task.AddDependency strAssetFilename
               Task.AddDependency BuildPath (GetParam ("RF3PROJECTTEMPLATEPATH"), GetParam ("RF3PROJECTTEMPLATENAME"))

               ' Set the Targets by calling the recursive function that sets a target for each
               ' asset in AssetInfos.
               If Not SetTargets (Task, AssetInfos, RootAsset) Then
                  If Not GetParam ("Cleaning") Then
                     ' No targets are set, call the build command anyway. This is so that we get
                     ' export messages in the build log that will help us decipher why we can't
                     ' export to a file.
                     RF3AssetExporterCommand Task, AssetID
                     BuildError "RF3 Asset, '" & RootAsset.Name & "' did not export correctly. " & _
                                "See warnings above."
                  End If
               End If
               If GetParam ("Cleaning") Then
                  GetParam("RWSUTILS").CheckOutFile GetRF3ExportDetailsFilename (Task)
               End If
               Task.AddTarget GetRF3ExportDetailsFilename (Task)

               If Not GetParam ("Cleaning") Then
                  ' Add the task for setting the properties of the root asset and its children.
                  ' This task must be run after the current one, so use AddTask, not AddSubTask
                  Task.AddTask "RF3AssetSetProperties", RootAsset, AssetInfos
               End If
            End If
         End Sub

         '-----------------------------------------------------------------------------------------
         '
         Sub RF3AssetExporterCommand (Task, AssetID)
            Dim Asset, RootAsset

            ' Get the root asset that references the RF3 file.
            Set Asset     = RWSScript.Asset (AssetID)
            Set RootAsset = GetRootRF3Asset (Asset)
            If AssetIsRootRF3 (RootAsset) Then
               BuildLog "Building " & RootAsset.Name & " RF3 asset"

               ' Build a full path to the RF3 file.
               strAssetFilename = BuildPath (GetParam ("WKSRESOURCEROOT"), RootAsset.File)
               strAssetFilename = FileSystem.GetAbsolutePathName (strAssetFilename)
               Task.SetParam "ASSETFILENAME", strAssetFilename

               ' Create an export options object containing the platform, endian and unicode flags.
               ' The following param's are only set up when building for a console. When building for
               ' workspace, we catch the error and avoid passing any export options.
               Dim ExportOptions, strAssetFilename
               On Error Resume Next
               Set ExportOptions = CreateObject ("RwRf3Translator.Rf3ExportOptions")
               ExportOptions.SetOption "Filename",      Task.GetParam ("ASSETFILENAME")
               ExportOptions.SetOption "BigEndian",     GetParam ("BIGENDIAN")
               ExportOptions.SetOption "Unicode",       GetParam ("UNICODE")
               ExportOptions.SetOption "PlatformFlags", GetParam ("PLATFORMFLAGS")
               On Error Goto 0

               ' We'll be overwriting the targets, so if the resource root is managed, check the
               ' target files out of version control first.
               If GetParam("RESOURCEROOTMANAGED") Then
                  ClearTargetsCounts Task, Task.GetParam (conAssetInfosParam), RootAsset
                  CheckOutTargets    Task, Task.GetParam (conAssetInfosParam), RootAsset
               End If

               ' Export from the RF3 file.
               Dim RF3Translator
               Set RF3Translator = GetParam ("RF3TRANSLATOR")

               ' Set the working directory to the same as the current RF3 so the translate can find
               ' relative textures.
               Dim WshShell, strWorkingDirectory
               Set WshShell = CreateObject("WScript.Shell")
               strWorkingDirectory = WshShell.CurrentDirectory
               WshShell.CurrentDirectory = FileSystem.GetParentFolderName (strAssetFilename)

               ' Translating could potentially throw a script error.
               ' For example if we're missing an asset template.
               On Error Resume Next
               RF3Translator.Translate CStr (strAssetFilename), _
                                      GetParam ("RF3PROJECTTEMPLATENAME"), _
                                      FileSystem.GetBaseName (RootAsset.file), _
                                      GetExportsLocation (Task), _
                                      ExportOptions
               On Error Goto 0

               ' Revert the working directory to the pre-translate one.
               WshShell.CurrentDirectory = strWorkingDirectory

               ' If the exported file contains multiple assets, split them out.
               SplitAssets Task, Task.GetParam (conAssetInfosParam)
            End If
         End Sub

         '-----------------------------------------------------------------------------------------
         ' Recursively set the targets from the asset infos - can be nested.
         Function SetTargets (Task, AssetInfos, RootAsset)
            Dim ContainedAssets, ContainedAssetNode, TargetFileNode, ChunkIndex
            Dim ChildAssetInfos, AssetInfo, ExportFilenames, bAnyTargetsSet, numExportFilenames
            Dim strActualResource
            bAnyTargetsSet = False

            If Not AssetInfos Is Nothing Then
               For Each AssetInfo In AssetInfos
                  ' Ignore this asset if it is set as disabled.
                  If AssetInfo.Enabled Then
                     ExportFilenames = AssetInfo.ExportFileNames
                     numExportFilenames = (UBound (ExportFilenames) - LBound (ExportFilenames)) + 1
                     If numExportFilenames = 1 Then
                        ' There is a file exported for this asset.
                        ' Increment the count of the number of assets using it.
                        IncrementAssetCount Task, AssetInfo

                        If GetParam ("Cleaning") Then
                           GetParam("RWSUTILS").CheckOutFile ExportFilenames (0)
                        End If

                        ' Add the original generated file as a target.
                        Task.AddTarget ExportFilenames (0)
                        ' Add the file that this asset references as a target
                        strActualResource = GetResourceFilename (Task, ExportFilenames (0), _
                                                                 AssetInfo)
                        If Len (strActualResource) > 0 Then
                           If GetParam ("Cleaning") Then
                              GetParam("RWSUTILS").CheckOutFile strActualResource
                           End If
                           Task.AddTarget strActualResource
                        End If
                        bAnyTargetsSet = True
                     ElseIf numExportFilenames = 0 Then
                        ' Only output the warning message during the building phase.
                        If Not GetParam ("Cleaning") Then
                           BuildWarning "There should be a file exported for each " & _
                                        "asset. The asset, '" & AssetInfo.Name & "' in the RF3 asset, '" & _
                                        RootAsset.Name &  _
                                        "' would export " & numExportFilenames & " files." & _
                                        Chr (13) & "Check that the templates have the correct " & _
                                        "settings and that the correct version of the export " & _
                                        "controls are registered."
                        End If
                    Else
                        ' Only output the warning message during the building phase.
                        If Not GetParam ("Cleaning") Then
                           BuildWarning "There should only be a single file exported for each " & _
                                        "asset. The asset, '" & AssetInfo.Name & "' in the RF3 asset, '" & _
                                        RootAsset.Name &  _
                                        "' would export " & numExportFilenames & " files." & _
                                        Chr (13) & "Check that the templates have the correct " & _
                                        "settings and that the correct version of the export " & _
                                        "controls are registered."
                        End If
                     End If
                  End If

                  ' Recursively call back into this function with each asset's children.
                  Set ChildAssetInfos = AssetInfo.Children
                  If Not ChildAssetInfos is Nothing Then
                     If ChildAssetInfos.Count > 0 Then
                        If Not bAnyTargetsSet Then
                           bAnyTargetsSet = SetTargets (Task, ChildAssetInfos, RootAsset)
                        Else
                           SetTargets Task, ChildAssetInfos, RootAsset
                        End If
                     End If
                  End If
               Next
            End If

            SetTargets = bAnyTargetsSet
         End Function

         '-----------------------------------------------------------------------------------------
         ' Clears all of the counts for each file that is stored in:
         ' Task.GetParam (conAssetCount & <filename>)
         Sub ClearTargetsCounts (Task, AssetInfos, RootAsset)
            Dim ContainedAssets, ContainedAssetNode, TargetFileNode, ChunkIndex
            Dim ChildAssetInfos, AssetInfo, ExportFilenames, numExportFilenames
            Dim strActualResource

            If Not AssetInfos Is Nothing Then
               For Each AssetInfo In AssetInfos
                  ' Ignore this asset if it is set as disabled.
                  If AssetInfo.Enabled Then
                     ExportFilenames = AssetInfo.ExportFileNames
                     numExportFilenames = (UBound (ExportFilenames) - LBound (ExportFilenames)) + 1
                     If numExportFilenames = 1 Then
                        ' There is a file exported for this asset, clear its count.
                        Task.SetParam conAssetCount & ExportFilenames (0), 0
                     End If
                  End If

                  ' Recursively call back into this function with each asset's children.
                  Set ChildAssetInfos = AssetInfo.Children
                  If Not ChildAssetInfos is Nothing Then
                     If ChildAssetInfos.Count > 0 Then
                        ClearTargetsCounts Task, ChildAssetInfos, RootAsset
                     End If
                  End If
               Next
            End If
         End Sub

         '-----------------------------------------------------------------------------------------
         ' Recursively check out the targets from version control - can be nested.
         Sub CheckOutTargets (Task, AssetInfos, RootAsset)
            Dim ContainedAssets, ContainedAssetNode, TargetFileNode, ChunkIndex
            Dim ChildAssetInfos, AssetInfo, ExportFilenames, numExportFilenames
            Dim strActualResource

            If Not AssetInfos Is Nothing Then
               For Each AssetInfo In AssetInfos
                  ' Ignore this asset if it is set as disabled.
                  If AssetInfo.Enabled Then
                     ExportFilenames = AssetInfo.ExportFileNames
                     numExportFilenames = (UBound (ExportFilenames) - LBound (ExportFilenames)) + 1
                     If numExportFilenames = 1 Then
                        ' There is a file exported for this asset.
                        ' Increment the count of the number of assets using it.
                        IncrementAssetCount Task, AssetInfo

                        ' Check out the original generated file.
                        GetParam("RWSUTILS").CheckOutFile ExportFilenames (0)

                        ' Check out the file that this asset references.
                        strActualResource = GetResourceFilename (Task, ExportFilenames (0), _
                                                                 AssetInfo)
                        If Len (strActualResource) > 0 Then
                           GetParam("RWSUTILS").CheckOutFile strActualResource
                        End If
                     End If
                  End If

                  ' Recursively call back into this function with each asset's children.
                  Set ChildAssetInfos = AssetInfo.Children
                  If Not ChildAssetInfos is Nothing Then
                     If ChildAssetInfos.Count > 0 Then
                        CheckOutTargets Task, ChildAssetInfos, RootAsset
                     End If
                  End If
               Next
            End If
         End Sub

         '-----------------------------------------------------------------------------------------
         Sub CreateRWStudioAssetHierarchy (AssetInfos, RootAsset)
            Dim OldIndex, NewIndex, bFound, OldChildAssetsArray, NewChildAssetsArray
            ReDim OldChildAssetsArray (-1)
            ReDim NewChildAssetsArray (-1)

            ' Get a list of all child assets of the root asset
            OldChildAssetsArray = BuildChildAssetsArray (RootAsset)

            ' Create the contained assets.
            If Not AssetInfos Is Nothing Then
               NewChildAssetsArray = CreateRWStudioAssets (RootAsset, RootAsset, AssetInfos)
            End If

            ' Delete assets no longer in the RF3.
            ' Check all of the old assets, if they're not in the new assets list, delete them.
            For OldIndex = LBound (OldChildAssetsArray) To UBound (OldChildAssetsArray)
               bFound = False
               For NewIndex = LBound (NewChildAssetsArray) To UBound (NewChildAssetsArray)
                  If OldChildAssetsArray (OldIndex) = NewChildAssetsArray (NewIndex) Then
                     bFound = True
                     Exit For
                  End If
               Next
               If Not bFound Then
                  RWSScript.Delete OldChildAssetsArray (OldIndex)
               End If
            Next
         End Sub

         '-----------------------------------------------------------------------------------------
         ' Recursively call to create a new asset for each asset in AssetInfos.
         Function CreateRWStudioAssets (RootRF3Asset, ParentAsset, AssetInfos)
            Dim CreatedAssetsArray, AssetInfo, ChildAsset
            Dim Index, AddToAssetsArray, ChildAssetInfos

            ReDim CreatedAssetsArray (-1)
            If Not AssetInfos Is Nothing Then
               For Each AssetInfo In AssetInfos
                  Set ChildAsset = Nothing ' Must be set to Nothing to compare against it later.

                  ' Ignore this asset if it is set as disabled.
                  If AssetInfo.Enabled Then
                     Set ChildAsset = CreateContainedAsset (RootRF3Asset, ParentAsset, AssetInfo)
                     If Not ChildAsset Is Nothing Then
                        ' Add the asset's id into the list of new IDs
                        ReDim Preserve CreatedAssetsArray (UBound (CreatedAssetsArray) + 1)   
                        CreatedAssetsArray (UBound (CreatedAssetsArray)) = ChildAsset.ID
                     End If
                  End If

                  ' Recursively call into this function with each child asset.
                  Set ChildAssetInfos = AssetInfo.Children
                  If Not ChildAssetInfos is Nothing Then
                     ' If we haven't created a child, then the parent should parent any grandchildren.
                     If ChildAsset Is Nothing Then
                        Set ChildAsset = ParentAsset
                     End If
                     AddToAssetsArray = CreateRWStudioAssets (RootRF3Asset, ChildAsset, ChildAssetInfos)
                     For Index = LBound (AddToAssetsArray) To UBound (AddToAssetsArray)
                        ReDim Preserve CreatedAssetsArray (UBound (CreatedAssetsArray) + 1)
                        CreatedAssetsArray (UBound (CreatedAssetsArray)) = AddToAssetsArray (Index)
                     Next
                  End If
               Next
            End If

            CreateRWStudioAssets = CreatedAssetsArray
         End Function

         '-----------------------------------------------------------------------------------------
         ' Recursively builds an array of all RWStudio assets that are a child of an
         ' RWStudio asset.
         Function BuildChildAssetsArray (Asset)
            Dim ChildAssetsArray, ChildAsset, GrandchildAssetsArray, Index

            'Add the child assets of this asset
            ReDim ChildAssetsArray (-1)
            For Each ChildAsset In Asset.ChildAssets
               ReDim Preserve ChildAssetsArray (UBound (ChildAssetsArray) + 1)   
               ChildAssetsArray (UBound (ChildAssetsArray)) = ChildAsset.ID

               ' Child assets may have children, add them.
               ReDim GrandchildAssetsArray (-1)
               GrandchildAssetsArray = BuildChildAssetsArray (ChildAsset)
               For Index = LBound (GrandchildAssetsArray) To UBound (GrandchildAssetsArray)
                  ReDim Preserve ChildAssetsArray (UBound (ChildAssetsArray) + 1)
                  ChildAssetsArray (UBound (ChildAssetsArray)) = GrandchildAssetsArray (Index)
               Next
            Next

            BuildChildAssetsArray = ChildAssetsArray
         End Function

         '-----------------------------------------------------------------------------------------
         ' Creates the RWStudio asset from the data contained in the asset info and parent
         ' assets passed in.
         ' Returns the asset that this function creates.
         Function CreateContainedAsset (RootRF3Asset, ParentAsset, AssetInfo)
            Dim strContainedAssetUID, ContainedAssetChildNode, strContainedAssetName
            Dim ContainedAsset, TagData, ExportFilenames

            Set CreateContainedAsset = Nothing ' Default to returning nothing
            strContainedAssetUID     = "{" & AssetInfo.Guid & "}"
            strContainedAssetName    = AssetInfo.Name
            If Len (strContainedAssetName) = 0 Then
               strContainedAssetName = "Child of " & FileSystem.GetBaseName (RootRF3Asset.File)
            End If

            ' If asset doesn't exist, create it
            Set ContainedAsset = RWSScript.Asset (strContainedAssetUID)
            If ContainedAsset Is Nothing Then
               Set ContainedAsset = RWSScript.CreateAsset (strContainedAssetName, _
                                 "Auto-generated from: %ResourceRoot%\" & RootRF3Asset.File, strContainedAssetUID)

               If Not ContainedAsset Is Nothing Then
                  ' An asset has been created, set the parent asset and properties.
                  ParentAsset.AddChildAsset (ContainedAsset)
                  Set CreateContainedAsset = ContainedAsset ' Set the return object
                  ContainedAsset.Platform     = RootRF3Asset.Platform
                  ContainedAsset.Dependencies = RootRF3Asset.Dependencies
               End If
            Else
               Set CreateContainedAsset = ContainedAsset
               ' Remove deleted tag if it's set
               If Not g_DeletedTag Is Nothing Then
                  TagData = g_DeletedTag.Get (ContainedAsset)
                  If TagData > 0 Then
                     g_DeletedTag.Set ContainedAsset, 0
                  End If
               End If

               ' Check if the child asset is a child of this parent, if not, add it.
               Dim ActualChildAsset, bIsNotAChild
               bIsNotAChild = True
               For Each ActualChildAsset In ParentAsset.ChildAssets
                  If ActualChildAsset.UID = ContainedAsset.UID Then
                     bIsNotAChild = False
                     Exit For
                  End If
               Next
               If bIsNotAChild Then
                  ParentAsset.AddChildAsset (ContainedAsset)
               End If
            End If
         End Function

         '-----------------------------------------------------------------------------------------
         ' Each exported file could potentially contain multiple assets. We need to create a new
         ' file for each asset, so that each RWS asset references a unique file containing only
         ' the resource data it needs. Recursive function to generate these extra files.
         Sub SplitAssets (Task, AssetInfos)
            Dim AssetInfo, ExportFilenames, ChildAssetInfos
            If Not AssetInfos Is Nothing Then
               For Each AssetInfo In AssetInfos
                  ' Ignore this asset if it is set as disabled.
                  If AssetInfo.Enabled Then
                     ExportFilenames = AssetInfo.ExportFileNames
                     If ((UBound (ExportFilenames) - _
                          LBound (ExportFilenames)) + 1) = 1 Then
                        SplitAsset Task, "{" & AssetInfo.GUID & "}", ExportFilenames (0), _
                                   AssetInfos
                        ' If it may be required, add the exported file into version control
                        If GetParam("RESOURCEROOTMANAGED") Then
                           GetParam("RWSUTILS").ImportToVersionControl ExportFilenames (0)
                        End If
                     End If
                  End If

                  ' Recurse into child assets
                  Set ChildAssetInfos = AssetInfo.Children
                  If Not ChildAssetInfos is Nothing Then
                     If ChildAssetInfos.Count > 0 Then
                        SplitAssets Task, ChildAssetInfos
                     End If
                  End If
               Next
            End If  
         End Sub

         '-----------------------------------------------------------------------------------------
         ' Calls into RWSComms to create a separate resource file for each 'asset' surrounded by
         ' "group chunk" tags. Returns the number of files that were generated and writes the
         ' number out to a local disk file.
         Sub SplitAsset (Task, AssetUID, TargetFilename, AssetInfos)
            Dim Asset, ResourceBuffer, nGeneratedAssets, fileExtension
            Set Asset = RWSScript.Asset (AssetUID)

            If Not Asset Is Nothing Then
               fileExtension = FileSystem.GetExtensionName (TargetFilename)
               ' If the target file isn't an RF3 then split it
               If Not LCase (Left (fileExtension, 3) = "rf3") Then
                  Set ResourceBuffer = RWSComms.CreateFileBuffer (TargetFilename, faRead)
                  If Not ResourceBuffer Is Nothing Then
                     nGeneratedAssets = RWSComms.SplitStreamByChunkGroup (ResourceBuffer, TargetFilename)
                     ' Write out the number of generated files.
                     Dim XMLDoc, RootNode
                     Set RootNode = GetLocalFileRootNode (Task, XMLDoc)

                     ' If we have a root node, write out the number of assets to it.
                     If Not RootNode Is Nothing Then
                        Dim strFindFilename, FileNode
                        ' Convert all slashes to double slashes, required for XPath.
                        strFindFilename = Replace (TargetFilename, "\" , "\\")
                        Set FileNode = RootNode.SelectSingleNode ("./File[.='" & strFindFilename & "']")

                        ' Create the file node if it isn't already in the XML doc.
                        If FileNode Is nothing Then
                           Set FileNode = XMLDoc.CreateElement ("File")
                           FileNode.Text = TargetFilename
                           RootNode.AppendChild FileNode
                        End If

                        ' Check we have a file node element to add the number of assets to.
                        If Not FileNode Is nothing Then
                           Dim strFile, bXMLFileExisted
                           strFile         = GetRF3ExportDetailsFilename (Task)
                           bXMLFileExisted = FileSystem.FileExists (strFile)

                           ' If the file already exists and could be under version control, attempt to check it out.
                           If bXMLFileExisted And GetParam("RESOURCEROOTMANAGED") Then
                              GetParam("RWSUTILS").CheckOutFile strFile
                           End If

                           ' Only write to the file if it is writable.
                           Dim file, bReadOnly
                           bReadOnly = False
                           If bXMLFileExisted Then
                              Set file = FileSystem.GetFile (strFile)
                              If file.attributes and 1 Then '(1 = read only)
                                 bReadOnly = True
                                 BuildWarning "The export details file, " & strFile & ", is read only. " & vbCR &_
                                              "It can not be written to, so this rule will be run each time for the " &_
                                              Asset.Name & " asset. Make it writable to prevent the rule being run more than once."
                              End If
                           End If

                           ' Write the number of assets to the XML file.
                           If Not bReadOnly Then
                              FileNode.SetAttribute conNumAssets, nGeneratedAssets
                              XMLDoc.Save strFile

                              ' If this is the first time the file is created, offer to add to version control.
                              If (Not bXMLFileExisted) And GetParam("RESOURCEROOTMANAGED") Then
                                 GetParam("RWSUTILS").ImportToVersionControl GetRF3ExportDetailsFilename (Task)
                              End If
                           End If
                        End If
                     End If
                  End If
               End If
            End If
         End Sub
      ]]></script>
   </rule>
   <rule name="RF3AssetSetProperties" buildcommand="RF3AssetSetPropertiesCommand"
                                      alwaysbuild="true">
      <object id="RWSScript"  progid="CSL.RWSScript.RWSScript"/>
      <object id="FileSystem" progid="Scripting.FileSystemObject"/>
      <script language="VBScript" src="BuildTools.vbs"/>
      <script language="VBScript" src="RF3Tools.vbs"/>
      <script language="VBScript"><![CDATA[
         '-----------------------------------------------------------------------------------------
         ' RF3Asset.rule - RF3AssetSetProperties rule
         '
         ' This rule is called from the RF3AssetExporter rule after its build command
         ' (or if no build command needed, after the dependency function).
         ' This rule sets the properties on each asset, including the non-persistent property for
         ' a target's resource location.
         '-----------------------------------------------------------------------------------------

         Option Explicit ' All variables must be explicitly declared (with Dim)

         '-----------------------------------------------------------------------------------------
         ' Sets the filename and type of each of the child assets. This needs setting after the
         ' export/split has happened so that the file will exist and the type can then be gleaned.
         ' Then set the type of the root RF3 asset using its child types.
         '   e.g. Type: RF3|rwID_CLUMP|rwID_CLUMP|rwID_HANIMANIMATION
         Sub RF3AssetSetPropertiesCommand (Task, RootAsset, AssetInfos)
            ' Set the parameters as Param's on the Task
            Task.SetParam conRootAssetParam, RootAsset
            Task.SetParam conAssetInfosParam, AssetInfos

            ' Set the properties of each asset that comes from this asset's rf3 file.
            SetChildAssetsProperties Task, RootAsset, AssetInfos

            If Not GetParam ("CONSOLEBUILD") Then
               ' Append the children's type name's to the root RF3's type name.
               If RootAsset.ChildAssets.Count > 0 Then
                  Dim ChildAsset, strNewType
                  strNewType = "RF3"
                  For each ChildAsset in RootAsset.ChildAssets
                     strNewType = strNewType & "|" & ChildAsset.Type
                  Next
                  If Not RootAsset.Type = strNewType Then
                     RootAsset.Type = strNewType
                  End If
               End If
            End If
         End Sub

         '-----------------------------------------------------------------------------------------
         ' This recursive function sets any properties of an RWS asset that must be set after an
         ' export.
         Sub SetChildAssetsProperties (Task, Asset, AssetInfos)
            Dim AssetInfo, ChildAsset, ExportFilenames, strNewResourceFilename
            For Each AssetInfo In AssetInfos
               ' Ignore this asset if it is set as disabled.
               If AssetInfo.Enabled Then
                  IncrementAssetCount Task, AssetInfo
                  Set ChildAsset = RWSScript.Asset ("{" & AssetInfo.Guid & "}")
                  If Not ChildAsset Is Nothing Then
                     ExportFilenames = AssetInfo.ExportFileNames
                     If ((UBound (ExportFilenames) - LBound (ExportFilenames)) + 1) = 1 Then
                        ' Get the resource filename for this asset.
                        strNewResourceFilename = GetResourceFilename (Task, ExportFilenames (0), _
                                                                      AssetInfo)

                        ' Add the 'split' resource file to version control, in case not there yet.
                        If GetParam("RESOURCEROOTMANAGED") Then
                           GetParam("RWSUTILS").ImportToVersionControl strNewResourceFilename
                        End If

                        ' Only set the filename and type if we're importing the asset to RWStudio, not building
                        ' for a console. If we're building, we don't want to overwrite the preview
                        ' filename with the pre-instanced filename.
                        If Not GetParam ("CONSOLEBUILD") Then
                           Dim strRelativeFile, strType
                           ' Set the filename if it is different.
                           strRelativeFile = GetParam("RWSUTILS").GetRelativePath (_
                                              strNewResourceFilename, GetParam ("WKSRESOURCEROOT"))
                           If Not ChildAsset.File = strRelativeFile Then
                              ChildAsset.File = strRelativeFile
                           End If

                           ' Now set the type if it is different (but only if export was successful)
                           If FileSystem.FileExists (strNewResourceFilename) Then
                              Dim oFile
                              Set oFile = FileSystem.GetFile (strNewResourceFilename)
                              If oFile.size > 0 Then
                                 strType = GetParam("RWSUTILS").GetStreamType (strNewResourceFilename, 0)
                                 If Not ChildAsset.Type = strType Then
                                    ChildAsset.Type = strType
                                 End If
                              End If
                           End If
                        Else
                           ' Set the resource property - we are building for a console.
                           SetResourcePropertyForAsset ChildAsset, strNewResourceFilename
                        End If
                     End If
                  End If
               End If

               ' Recursively call back into this function with each asset's children.
               Dim ChildAssetInfos
               Set ChildAssetInfos = AssetInfo.Children
               If Not ChildAssetInfos is Nothing Then
                  If ChildAssetInfos.Count > 0 Then
                     SetChildAssetsProperties Task, ChildAsset, ChildAssetInfos
                  End If
               End If
            Next
         End Sub

         '-----------------------------------------------------------------------------------------
         ' Sets the resource property for a single asset.
         Sub SetResourcePropertyForAsset (Asset, strNewResourceFilename)
            If Len (strNewResourceFilename) = 0 Then
               Exit Sub
            End If

            ' Get the current resource filename for this target.
            Dim strCurrentResourceFilename
            strCurrentResourceFilename = GetRF3ResourceFilename (Asset)

            ' Only set the property if it is different to the currently set one.
            If Not strCurrentResourceFilename = strNewResourceFilename Then
               Dim Property, PropertyData, DataSection
               Set Property     = RWSScript.Property ("RWSResourceForTemplate-" & _
                                      FileSystem.GetBaseName (GetParam ("RF3PROJECTTEMPLATENAME")))
               Set PropertyData = CreateObject ("CSL.RWSScript.RWSData")
               Set DataSection  = PropertyData.Add (6) ' 6-dtChar - defined in RWSScript.h
               DataSection.Add strNewResourceFilename
               Property.Set Asset, PropertyData, 1 ' SystemFlags=1 => don't save
            End If
         End Sub
      ]]></script>
   </rule>
</build>
