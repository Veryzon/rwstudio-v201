#include "stdafx.h"
#include "RWSPreview.h"
#include "RWSPreviewControl.h"

///////////////////////////////////////////////////////////////////////////////
// The global instance of _Module
CRWSPreviewModule _Module;

///////////////////////////////////////////////////////////////////////////////
// AUTOGENERATED : Passed to CreateThread to monitor the shutdown event
static DWORD WINAPI MonitorProc(void* pv)
{
    CRWSPreviewModule* p = (CRWSPreviewModule*)pv;
    p->MonitorShutdown();
    return 0;
}

///////////////////////////////////////////////////////////////////////////////
// AUTOGENERATED
LONG CRWSPreviewModule::Unlock()
{
    LONG l = CComModule::Unlock();
    if (l == 0)
    {
        bActivity = true;
        SetEvent(hEventShutdown); // tell monitor that we transitioned to zero
    }
    return l;
}

///////////////////////////////////////////////////////////////////////////////
// AUTOGENERATED
bool CRWSPreviewModule::StartMonitor()
{
    hEventShutdown = CreateEvent(NULL, false, false, NULL);
    if (hEventShutdown == NULL)
        return false;
    DWORD dwThreadID;
    HANDLE h = CreateThread(NULL, 0, MonitorProc, this, 0, &dwThreadID);
    return (h != NULL);
}

///////////////////////////////////////////////////////////////////////////////
// AUTOGENERATED : Monitors the shutdown event
void CRWSPreviewModule::MonitorShutdown()
{
    while (1)
    {
        WaitForSingleObject(hEventShutdown, INFINITE);
        DWORD dwWait=0;
        do
        {
            bActivity = false;
            dwWait = WaitForSingleObject(hEventShutdown, TIMEOUT);
        } while (dwWait == WAIT_OBJECT_0);
        // timed out
        if (!bActivity && m_nLockCnt == 0) // if no activity let's really bail
        {
#if _WIN32_WINNT >= 0x0400 & defined(_ATL_FREE_THREADED)
            CoSuspendClassObjects();
            if (!bActivity && m_nLockCnt == 0)
#endif
                break;
        }
    }
    CloseHandle(hEventShutdown);
    PostThreadMessage(dwThreadID, WM_QUIT, 0, 0);
}

///////////////////////////////////////////////////////////////////////////////
// Process main message loop.
void CRWSPreviewModule::ProcessMessageLoop ()
{
   MSG msg = {0};
   while (TRUE)
   {
      if (m_pIdleHandler)
      {
         if (::PeekMessage (&msg, 0, 0, 0, PM_REMOVE))
         {
            if (msg.message != WM_QUIT)
               ::DispatchMessage (&msg);
            else
               break;
         }
         else
         {
            m_pIdleHandler->OnIdle ();
            Sleep (1000/60); // Very crude method of limiting framerate to 30Hz
         }
      }
      else
      {
         if (::GetMessage (&msg, 0, 0, 0))
            ::DispatchMessage (&msg);
         else
            break;
      }
   }
}

///////////////////////////////////////////////////////////////////////////////
//
void CRWSPreviewModule::SetIdleHandler (CRWSPreviewControl * pIdleHandler)
{
   ATLASSERT (dwThreadID == ::GetCurrentThreadId ());
   m_pIdleHandler = pIdleHandler;
}
